# Generated by Django 3.1.7 on 2021-03-12 14:48

import account.managers
import django.core.validators
from django.db import migrations, models
import model_utils.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('name', models.CharField(blank=True, max_length=75, verbose_name='full name')),
                ('username', models.CharField(db_index=True, error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 50 characters or fewer. only contain lowercase letters or underscores.', max_length=50, unique=True, validators=[django.core.validators.RegexValidator(code='invalid', message='Enter a valid Username consisting of lowercase letters or underscores.', regex='^[a-z_]*$')], verbose_name='username')),
                ('email', models.EmailField(db_index=True, error_messages={'unique': 'A user with that email address already exists.'}, help_text='Required. valid email must be provided to use when contact with user.', max_length=254, unique=True, verbose_name='email address')),
                ('role', model_utils.fields.StatusField(blank=True, choices=[('staff', 'staff'), ('moderator', 'moderator'), ('customer', 'customer')], db_index=True, default='moderator', help_text='Select user role in site. based on role will decide where user can log into.', max_length=100, no_check_for_status=True, verbose_name='user role')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active.            Unselect this instead of deleting accounts.', verbose_name='active status')),
                ('is_verified', models.BooleanField(default=False, help_text='Designates whether this user has completed sign up process.', verbose_name='Has Verified Account')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'authentication Accounts',
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', account.managers.UserManager()),
            ],
        ),
    ]
